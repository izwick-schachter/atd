var search_data = {"index":{"searchIndex":["atd","app","path","assets","verbs","renderers","requesthandlers","server","validations","object","all()","allowed_verbs()","assets_folder()","call()","create_message()","get()","html()","new()","parse()","path_info()","paths()","post()","setup()","start()","readme","companyname.website.html","main.css","atd.gemspec"],"longSearchIndex":["atd","atd::app","atd::path","atd::path::assets","atd::path::verbs","atd::renderers","atd::requesthandlers","atd::server","atd::validations","object","atd::requesthandlers::all()","atd::path::verbs::allowed_verbs()","atd::validations::assets_folder()","atd::app::call()","object#create_message()","atd::requesthandlers::get()","atd::renderers#html()","atd::path::new()","atd::renderers::parse()","atd::app::path_info()","atd::path::paths()","atd::requesthandlers::post()","atd::path::assets::setup()","atd::server#start()","","","",""],"info":[["ATD","","ATD.html","","<p>TODO: Add asset pipeline TODO: Test Driven Development TODO: Test how well\nactions within routes work …\n"],["ATD::App","","ATD/App.html","",""],["ATD::Path","","ATD/Path.html","","<p>Manages all the initally created paths. They&#39;re all stored here, and\nthis class is queried by the …\n"],["ATD::Path::Assets","","ATD/Path/Assets.html","","<p>Allows ATD::Server&#39;s start method to compile the static assets into\nroutes\n"],["ATD::Path::Verbs","","ATD/Path/Verbs.html","","<p>Manages the creation of verb methods for use in the main method to create\nvarious paths\n"],["ATD::Renderers","","ATD/Renderers.html","",""],["ATD::RequestHandlers","","ATD/RequestHandlers.html","","<p>This module is responsible for delegating http verb unique parsing methods.\nCurrently doesn&#39;t do …\n"],["ATD::Server","","ATD/Server.html","","<p>Manages the (currently only webrick) server\n"],["ATD::Validations","","ATD/Validations.html","","<p>This class is responsible for validating all of the file paths which are\nused in the app\n"],["Object","","Object.html","","<p>Adds relevant methods to Object for easy access\n"],["all","ATD::RequestHandlers","ATD/RequestHandlers.html#method-c-all","()","<p>Because all paths need their action called, so this method does it, and is\ncalled by all the other ATD::RequestHandlers …\n"],["allowed_verbs","ATD::Path::Verbs","ATD/Path/Verbs.html#method-c-allowed_verbs","()","<p>Returns an array of the allowed http verbs as symbols (e.g. :get, :post)\n"],["assets_folder","ATD::Validations","ATD/Validations.html#method-c-assets_folder","(file_name)","<p>This checks if a file name is using `..` to back out, which would allow\naccess to any files on the system …\n"],["call","ATD::App","ATD/App.html#method-c-call","(env)","<p>The real rack app\n"],["create_message","Object","Object.html#method-i-create_message","(name, &block)",""],["get","ATD::RequestHandlers","ATD/RequestHandlers.html#method-c-get","()","<p>Processes get routes. Returns either the filename or plaintext output, and\nsends it back to ATD::App …\n"],["html","ATD::Renderers","ATD/Renderers.html#method-i-html","(file)","<p>Parses an html file (in this case, there is nothing to be parsed, it simply\nreturns an html file.)\n"],["new","ATD::Path","ATD/Path.html#method-c-new","(path, headers, action, method, output, asset = false)","<p>Initializes a path, saving them all in class variables and also manages\nduplicates.\n"],["parse","ATD::Renderers","ATD/Renderers.html#method-c-parse","(filename)","<p>As input it takes a filename, checks if it&#39;s in the assets folder, then\nparses it using the other …\n"],["path_info","ATD::App","ATD/App.html#method-c-path_info","()","<p>Allows ATD::RequestHandlers to access env\n"],["paths","ATD::Path","ATD/Path.html#method-c-paths","()","<p>Returns all the paths that exist. Queried by the ATD::App.call (rack\nserver)\n"],["post","ATD::RequestHandlers","ATD/RequestHandlers.html#method-c-post","()","<p>Processes post routes. It currently just processes the action by calling\nall\n"],["setup","ATD::Path::Assets","ATD/Path/Assets.html#method-c-setup","()","<p>Takes all the files in the assets directory and creates routes from them\n"],["start","ATD::Server","ATD/Server.html#method-i-start","()","<p>Creates routes for all the assets, then starts a WEBrick server.\n"],["README","","README_md.html","","<p>ATD\n<p>The (assistant) technical director of your website.\n<p>What is it?\n"],["companyname.website.html","","assets/companyname_website_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html&gt;\n\n<pre>&lt;head&gt;\n        &lt;title&gt;CompanyName.Website&lt;/title&gt;\n        &lt;link rel=&quot;stylesheet&quot; ...</pre>\n"],["main.css","","assets/main_css.html","","<p>html,body {padding:0;margin:0;width:100%;height:100%;}\n\n<pre>.container {\n        background-color:#A5A5A5; ...</pre>\n"],["atd.gemspec","","atd_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name        = &#39;atd&#39;\ns.version     = &#39;0.0.3&#39;\ns.date        = &#39;2016-04-31&#39; ...</pre>\n"]]}}